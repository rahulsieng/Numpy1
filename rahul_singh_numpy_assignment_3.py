# -*- coding: utf-8 -*-
"""Rahul Singh - Numpy-assignment-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1orqeEojUIhka7dUAEhyuy5_JHr0wJKnm
"""

import numpy as np

# Setup for questions 1 and 2
arr1=np.arange(40).reshape(8,5)
arr1

# Q1. From arr1 you have to fetch out every alternate column starting from col1

arr1[:,[0,2,4]]

# Q2. From arr1 fetch an array which would contain {0,2,4} {15,17,19} and {30,32,34}

arr1[:,[0,2,4]][[0,3,6],:]

# Setup for question

# Generating a random numpy array of intergers ranging between 1 and 10000

arr2=np.random.randint(low=1, high=10000, size=10).reshape(2,5)
arr2

"""**Normalization** rescales the values into a range of [0,1]. This might be useful in some cases where all parameters need to have the same positive scale. You have to do this a lot in machine learning for eg you are working with 2 cols, one is total runs scored by a batsman(in the scale of 1000s), and the second is number of matches played by him(in the scale of 10s). The formula for normalization is given below

 Xchanged=(X−Xmin)/(Xmax−Xmin)
"""

# Q3. Write a code to normalize arr2.

np.percentile(arr1,25)

np.percentile(arr1,10000)

"""Missing values are a pain in the a**(sorry for language). But yes trust me."""

# Q4. How would you check if your numpy array has some missing values?

# Hint: Thoda research karo numpy me existing functions hai

np.isnan(arr2[0])

# Q5. Write a function which will accept 2 arguments.
# First: A 1D numpy array arr
# Second: An integer n {Please make sure n<=len(arr)}

# Output: The output should be the nth largest item out of the array

# Example1 : arr=(12,34,40,7,1,0) and n=3, the output should be 12
# Example2 : arr=(12,34,40,7,1,0) and n=1, the output should be 40

def nLargest(arr,n):
 for i in range(n):
  print(arr[i], end =" ")
arr = [14, 23, 12, 30, 10, 50]
n = 1
nLargest(arr, n)

arr=(12,34,40,7,1,0)
len(arr)

